//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RaidLog {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Queries {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Queries() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("RaidLog.Queries", typeof(Queries).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to with re as
        ///(
        ///	select RiskId
        ///	     , EvaluationDate
        ///	     , ImpactId
        ///	     , LikelihoodId
        ///	     , Owner
        ///	     , IsActive
        ///		 , row_number() over (partition by RiskId order by EvaluationDate desc) as rn	
        ///	  from dbo.RiskEvaluation
        ///)
        ///	select r.Id
        ///	     , r.RiskNumber
        ///	     , r.Description
        ///	     , r.RaisedDate
        ///	     , r.RaisedBy
        ///	     , r.RifCategoryId
        ///	     , r.IsProjectRisk
        ///	     , r.Workstream
        ///	     , r.ImpactCommentary
        ///	     , r.ApproachId
        ///	     , r.VersionNumber
        ///		 , re.RiskId
        ///		 , re [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ActiveRisksForProject {
            get {
                return ResourceManager.GetString("ActiveRisksForProject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select 
        ///    p.Id, 
        ///    p.Code, 
        ///    p.Name 
        ///from 
        ///    dbo.Project p 
        ///where 
        ///    IsActive = 1 
        ///order by 
        ///    p.Code;
        ///.
        /// </summary>
        internal static string AllActiveProjects {
            get {
                return ResourceManager.GetString("AllActiveProjects", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to with re as
        ///(
        ///	select RiskId, IsActive
        ///		 , row_number() over (partition by RiskId order by EvaluationDate desc) as rn	
        ///	  from dbo.RiskEvaluation
        ///)
        ///select r.ProjectId, re.RiskId, re.IsActive as IsActive
        ///  from dbo.Risk r left join re on r.Id = re.RiskId
        /// where r.ProjectId in (select Id from dbo.Project p where p.IsActive = 1) 
        ///  and rn=1 
        ///  and (re.IsActive is null or re.IsActive  = 1);.
        /// </summary>
        internal static string AllProjectsAndActiveRisk {
            get {
                return ResourceManager.GetString("AllProjectsAndActiveRisk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT [Id]
        ///      ,[Description]
        ///  FROM [dbo].[Approach];
        ///
        ///SELECT [Id]
        ///      ,[Description]
        ///      ,[Score]
        ///      ,[BudgetImpact]
        ///      ,[TimeOverrunImpact]
        ///      ,[ReputationalImpact]
        ///      ,[BusinessImpact]
        ///  FROM [dbo].[Impact]
        ///ORDER BY [Score];
        ///
        ///SELECT [Id]
        ///      ,[Description]
        ///      ,[Score]
        ///  FROM [dbo].[Likelihood]
        ///ORDER BY [Score];
        ///
        ///SELECT [Id]
        ///      ,[Description]
        ///  FROM [dbo].[RifCategory].
        /// </summary>
        internal static string GetReferenceData {
            get {
                return ResourceManager.GetString("GetReferenceData", resourceCulture);
            }
        }
    }
}
